name: CI - JFrog Xray scan

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_NAME: react-vuln-demo
  BUILD_NUMBER: ${{ github.run_id }}

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies (npm)
        run: |
          npm install

      - name: Install dependencies (npm)
        run: |
          npm ci

      # Install JFrog CLI and configure (uses repo secrets)
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        with:
          version: latest
          jfrog_url: ${{ secrets.JFROG_URL }}
          # you can use api key or password; prefer API key or access token
          jfrog_user: ${{ secrets.JFROG_USERNAME }}
          jfrog_password: ${{ secrets.JFROG_API_KEY }}

      # Option A: use JFrog CLI to run npm install (collects build-info)
      # If you prefer to use npm ci (we already ran it), you can still publish build-info by running `jf rt build-publish`.
      - name: Collect build info (via jf rt npm-install)
        run: |
          # configure npm resolution to Artifactory if needed (optional)
          # jf rt npm-config --repo <your-npm-remote-or-virtual-repo>
          # collect dependencies and attach to build
          jf rt npm-install --build-name=${{ env.BUILD_NAME }} --build-number=${{ env.BUILD_NUMBER }}

      - name: (Optional) Run build (create build artifacts)
        run: |
          npm run build

      - name: Publish build-info to Artifactory
        run: |
          jf rt bp ${{ env.BUILD_NAME }} ${{ env.BUILD_NUMBER }}

      - name: Trigger Xray scan
        run: |
          # Use build-scan to request Xray to scan the published build.
          # --vuln prints vulnerabilities
          jf rt build-scan ${{ env.BUILD_NAME }} ${{ env.BUILD_NUMBER }} --vuln

      - name: Show build-scan result (file)
        run: |
          jf rt build-scan ${{ env.BUILD_NAME }} ${{ env.BUILD_NUMBER }} --vuln --json > xray_scan_result.json
          cat xray_scan_result.json
